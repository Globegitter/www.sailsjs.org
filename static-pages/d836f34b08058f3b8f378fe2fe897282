<!DOCTYPE html><html><head><style type="text/css">@charset "UTF-8";[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}</style>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Sails.js | Realtime MVC Framework for Node.js</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link href="/styles/fonts.css" rel="stylesheet" type="text/css">
    <link href="http://fonts.googleapis.com/css?family=Open+Sans:400italic,600" rel="stylesheet" type="text/css">
    <meta name="description" content="Sails.js makes it easy to build custom, enterprise-grade Node.js apps. It is designed to resemble the MVC architecture from frameworks like Ruby on Rails, but with support for the more modern, data-oriented style of web app development. It's especially good for building realtime features like chat.">
    <meta name="author" content="Mike McNeil, Balderdash, and contributors">

    <!--STYLES-->
    <link rel="stylesheet" href="/min/production.css">
    <!--STYLES END-->

    <!--[if lt IE 9]>
      <link rel="stylesheet" href="css/ie8.css">
    <![endif]-->
  </head>
  <body ng-app="Sails" ng-controller="AppCtrl" style="" class="ng-scope">

    <!-- ngInclude: 'templates/pages/Reusable/Header/Topbar.html' --><div class="topbar-wrapper ng-scope" ng-include="'templates/pages/Reusable/Header/Topbar.html'"><div class="topbar ng-scope">

  <!--Mobile menu button-->
  <div class="menu" ng-click="menuVisible = !menuVisible" ng-class="{'menu-open': menuVisible === true}">
    <div class="menu-button-stripe"></div>
    <div class="menu-button-stripe"></div>
    <div class="menu-button-stripe"></div>
  </div>

  <!--Navigation list-->
  <div class="nav-container">
    <div class="branding">
      <a ng-click="intent.goto('/')">
        <img class="logo" src="/images/logo_sails.png" alt="Sails">
      </a>
      <span class="version">v0.10</span>
    </div>
    <ul class="nav" ng-class="{'menu-open': menuVisible === true}">
      <!-- <li ng-click="menuVisible = false"><a class="sails-site"
          ng-class="{current: getIsCurrentPage('/')}"
          href="#/">Home</a></li> -->
      <li ng-click="menuVisible = false"><a class="sails-site current" ng-class="{current: getIsCurrentPage('/getStarted')}" ng-click="intent.goto('/getStarted')">Get Started</a></li>
      <li ng-click="menuVisible = false"><a class="sails-site" ng-class="{current: getIsCurrentPage('/features')}" ng-click="intent.goto('/features')">Features</a></li>
      <li ng-click="menuVisible = false"><a class="sails-site" ng-class="{current: getIsCurrentPage('/documentation')}" href="#/documentation">Documentation</a></li>
      <li ng-click="menuVisible = false"><a class="sails-site" ng-class="{current: getIsCurrentPage('/support')}" ng-click="intent.goto('/support')">Support</a></li>
     <!--  <li class="no-mobile">
        <a class="sails-site"
          ng-class="{current: getIsCurrentPage('/logos')}"
          href="#/logos">Logos</a>
      </li> -->
<!--       <li><a target="_blank" href="http://michaelmcneil.com">Blog</a></li> -->
    </ul>
  </div>
</div>
</div>
    <div class="wrap">
      <!-- ngView:  --><div ng-view="" class="ng-scope"><div skrollr="" class="page get-started ng-scope" ng-class="{'animating-in': animatingIn, 'animating-out': animatingOut}">

  <div class="get-started-container">
  <a name="the-top"></a>
    <!-- Left-side navigation -->
    <div class="navigation" style="position:fixed;opacity:1;">
      <ul>
        <li><h4>Getting Started:</h4></li>
        <li><a data-ng-click="scrollTo('what-is-sails')">What is Sails?</a></li>
        <li><a data-ng-click="scrollTo('new-to-node')">New To Node?</a></li>
        <li><h4>More:</h4></li>
        <li><a href="#/documentation">Getting help</a></li>
        <li><a href="#/support">More resources</a></li>
      </ul>
    </div>

    <!-- IMAGES -->
    <div class="bubbles one">
      <img src="/images/bkgd_bubbles02.png">
    </div>
    <div class="bubbles two">
      <img src="/images/bkgd_bubbles02.png">
    </div>
    <div class="bubbles three">
      <img src="/images/bkgd_bubbles03.png">
    </div>
    <div class="bubbles four">
      <img src="/images/bkgd_bubbles02.png">
    </div>
    <div class="bubbles five">
      <img src="/images/bkgd_bubbles03.png">
    </div>
   <!--  <div class="fish-wrapper" data-0="display:none;" data-300="display:block;">
      <div class="fish" data-2200="left:50%;" data-2800="left:0%"></div>
    </div> -->

      <div class="get-started-content documentation-style-guide" id="get-started-content">
      <a name="get-started"></a>
      <!-- ngInclude:  -->
      <a class="return-top" data-ng-click="scrollTo('the-top')">back to top</a>
      <a name="what-is-sails"></a>
      <!-- ngInclude:  --><div ng-include="" src="'/templates/gettingStarted/WhatIsSails.html'" class="ng-scope"><h1 id="what-is-sails-" class="ng-scope">What is Sails?</h1>
<p class="ng-scope">Sails is, of course, a web framework.  But take a step back.  What does that mean?  Sometimes, when we refer to the "web", we mean the "front-end web."  We think of concepts like web standards, or HTML 5, or CSS 3; and frameworks like Backbone, or Angular, or jQuery.  Sails is not "that kind" of a web framework.  Sails works great with Angular and Backbone, but you would never use Sails <em>instead</em> of those libraries.</p>
<p class="ng-scope">On the other hand, sometimes when we talk about "web frameworks", we mean the "back-end web."  This evokes concepts like REST, or HTTP, or WebSockets; and technogies like Java, or Ruby, or Node.js.  A "back-end web" framework helps you do things like build APIs, serve HTML files, and handle hundreds of thousands of simultaneous users.  Sails is "that kind" of web framework.</p>
<h2 id="convention-over-configuration" permalink="convention-over-configuration" class="ng-scope">Convention over Configuration</h2><a href="#/getStarted?q=convention-over-configuration" class="permalink-thing">#</a>
<p class="ng-scope">Sails accomplishes many of the same goals as other MVC web application frameworks, using many of the same methodologies.  This was done on purpose.  A consistent approach makes developing apps more predictable and efficient for everybody involved.</p>
<p class="ng-scope">Imagine starting a new job at a company building a Sails app (or imagine starting the company, if that's your thing.)  If anyone on your team has worked with frameworks like Zend, Laravel, CodeIgniter, Cake, Grails, Django, ASP.NET MVC, or Rails, Sails will feel pretty familiar.  Not only that, but they can look at a Sails project and know, generally, how to code up the basic patterns they've implemented over and over again in the past; whether their background is in PHP, Ruby, Java, C#, or Node.js.  What about your second app, or your third?  Each time you create a new Sails app, you start with a sane, familiar boilerplate that makes you more productive.  In many cases, you'll even be able to recycle some of your backend code.</p>
<blockquote class="ng-scope">
<p><strong>History</strong></p>
<p>Sails didn't invent this concept-- it's <a href="https://en.wikipedia.org/wiki/Convention_over_configuration" target="_blank">been around for years</a>.  Even before the phrase "Convention over Configuration" (or CoC) was popularized by Ruby on Rails, it was a core tenant of the JavaBeans specification and in many ways, a natural lashback against the extremely verbose XML configuration common in traditional Java web frameworks of the late '90s and early 2000s.</p>
</blockquote>
<h2 id="loose-coupling" permalink="loose-coupling" class="ng-scope">Loose Coupling</h2><a href="#/getStarted?q=loose-coupling" class="permalink-thing">#</a>
<blockquote class="ng-scope">
<p>TODO: explain why pushing towards an open standard for programming apps is important.</p>
<p>TODO: more specifically, give some background why small, ld1ï¿½@oosely coupled modules are good.</p>
<p>TODO: explain how Sails core is a set of standalone, loosely coupled components (link to MODULES.md).</p>
<p>TODO: discuss how a Sails app is a set of standalone, loosely coupled components:</p>
<ul>
<li>how each model, or controller, etc. is a node module.</li>
<li>how policies are designed to be general-purpose and shared between apps and/or developers.</li>
<li>how Sails strives to make adapter development as easy as possible, even for non-database integrations.</li>
</ul>
<p>TODO: explain how Sails is designed for any part to be rip-outable, overridden, or extended (hooks, generators, adapters)</p>
<p>TODO: Explain how Sails can be used without any boilerplate files, just like Express, to fit an imperative programming style, or plug in as part of your existing Node / Node+Express app.</p>
<p>Links:</p>
<ul>
<li><a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js" target="_blank">Unix philosophy</a></li>
<li><a href="https://blog.nodejitsu.com/the-nodejs-philosophy/" target="_blank">Node culture</a></li>
</ul>
</blockquote>
<h2 id="pragmatism" permalink="pragmatism" class="ng-scope">Pragmatism</h2><a href="#/getStarted?q=pragmatism" class="permalink-thing">#</a>
<blockquote class="ng-scope">
<p>TODO: set the stage- the purpose of any practical web framework should be to solve real-world use cases.  Node, being built on JavaScript, is the most intensely pragmatic thing to hit the scene since the introduction of Java.  It <a href="http://readwrite.com/2013/08/09/why-javascript-will-become-the-dominant-programming-language-of-the-enterprise" target="_blank">will replace Java</a> <a href="http://blog.appfog.com/node-js-is-taking-over-the-enterprise-whether-you-like-it-or-not/" target="_blank">in the enterprise</a>.</p>
<p>TODO: explain where this fits into the Node.js ecosystem, and pay homage to the PHP community (pragmatism is the best thing PHP has going for it)</p>
<p>TODO: provide some examples of choices we've made w/ Sails that lean away from strict adherance and towards pragmatism (e.g. globals, services, symlinking dependencies on sails new, etc.)</p>
<p>TODO: explain how it's important to allow for elegant harmony to be restored (ability to disable globals, running a sails app as a standard node module with <code>npm start</code>, running sails from a single file)</p>
</blockquote>
<!--
## The MVC Architecture
Sails implements the aforementioned Model, View, Controller (MVC) architecture for Node.js. You can learn more about MVC <a href="https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names" target="_blank">here</a>, <a href="http://symfony.com/legacy/doc/askeet/1_0/en/3" target="_blank">here</a>, and <a href="http://guides.rubyonrails.org/getting_started.html#the-mvc-architecture" target="_blank">here</a>, but the tl;dr is that it's the really awesome, industry-standard way of doing things for modern web apps.
If you're wondering if Sails is a "proper MVC", you're probably right! It wasnât made to mimic Django, Zend, or Rails; it was made to resemble the MVC architecture weâre used to while still unlocking the features necessary to leverage the unique advantages of Node.js: seamless WebSockets support, advanced memory management using streams, and composable, data-driven APIs using the powerful concept of chainable middleware from Connect/Express.
-->



<!--
## With a Modern Twist
Sails does a few things other MVC frameworks can't do:


### Socket.io / Realtime / WebSockets
Sails supports transport agnostic routing, which allows your controllers/policies to automatically handle Socket.io / WebSocket messages.  In the past, you'd have to maintain a separate code base to make that happen. This makes it much easier to add pubsub features, in particular the server-originated or 'comet' notifications you need for realtime apps, realtime analytics dashboards, and multiplayer games.

### Performance
Node has fantastic performance. Specifically, we've had some great results using 4 EC2 small servers to scale Sails to 10,000 concurrent connections.  In that case, the bottleneck was actually our test client.  Sails users have reported getting about 9k concurrent connections on one EC2 medium server.

+ Built-in support for Redis session store, and Redis MQ for reverse pubsub routing

### Node.js
Node.js is the fastest-growing, all-javascript solution to <a href="https://www.youtube.com/watch?v=jo_B4LTHi3I" target="_blank">server-side development</a>. Writing your code in one language on the front-end and back-end means less context-shifting, faster development, and better apps.

### Express
Sails's controllers and policies are really just [Express](https://github.com/expressjs/) middleware. This means your Sails app logic is interoperable with existing Express apps, and vice versa

+ Supports the existing ecosystem of Express middleware

### REST Blueprints
  + Automatically generated JSON API for manipulating models (You don't have to write any backend code to build simple CRUD apps)
  + Automatic route bindings for your controller actions

### Built-in support for controller/action-level middleware mappings of:
  + Authentication logic
  + Role-based access control
  + Custom policies (e.g. file storage quotas)


## Convenience features for front-end developers
If you are developing an HTML/CSS front-end powered by Sails, there are some other convenience features we've included that might help you out.

### Support for Grunt
As of Sails v0.9, all new projects come with a Gruntfile. Grunt is to Node.js as mvn/ant is to Java, or as rake is to Ruby. It has a strong, supportive community, and a wide array of plugins and build tools. Adding support for your favorite template engine or css/js preprocessor is as easy as modifying your project's Gruntfile

### Asset bundling
Sails bundles support for LESS and JST templates

  + If you use the `--linker` option when creating your new project, your assets will be automatically bundled up and included in your layout HTML
  + Front-end support for SASS, Handlebars, CoffeeScript, Stylus, TypeScript, etc. is as easy as modifying your app's Gruntfile
  + In production mode, Sails will also minify and concatenate your assets
  + If you need to take web performance even further (this comes up for mobile web apps in particular), you can run `sails build` to output a CDN-ready snapshot of your apps assets

### PhoneGap, Chrome extensions, and SPA-friendliness
  + `sails build` spits out a ready-to-deploy `www` directory for use in all of the sorts of places where you need indepenedent, API-driven front-end code
  + Sails has easy-to-use CORS integration
  + Built-in support for cross-site request forgery (CSRF) protection, with a handy token-based option for single-page apps



## Finally, a note for UX-focused guys/gals
> ####From one geek to another:

> I work on a lot of web and mobile apps with our team at <a href="http://balderdash.co" target="_blank">Balderdash</a>.  More than ever before, it's important that your applications not only work, but look and feel awesome.
I originally built Sails to tackle these sorts of API-driven, front-end heavy projects for our startup and enterprise clients.  Since then, top-notch experiences have become industry standard (typically using Backbone, Angular, Ember, Knockout, etc.)
Reducing the amount of time and energy you spend on your app's server code allows you to spend more time focusing on cool features.  The easier your backend code is to write and maintain, the more nimble you can be.  The more nimble you are, the more adaptable your project can be to your users' needs, and the faster you respond to bug fixes.  The more adaptable you are... you get the idea!


-->

<p class="ng-scope"><a href="http://githalytics.com/balderdashy/sails/wiki/what_is_sails" target="_blank"><img src="https://cruel-carlota.pagodabox.com/8acf2fc2ca0aca8a3018e355ad776ed7" alt="githalytics.com alpha" title="githalytics.com"></a></p>
<p class="ng-scope"><docmeta name="uniqueID" vald1ï¿½@ue="WhatIsSails126387"></docmeta></p>
<docmeta name="displayName" value="What Is Sails" class="ng-scope">
</docmeta></div>
      <a class="return-top" data-ng-click="scrollTo('the-top')">back to top</a>
      <a name="new-to-node"></a>
      <!-- ngInclude:  --><div ng-include="" src="'/templates/gettingStarted/NewToNode.html'" class="ng-scope"><h1 id="new-to-node-js-https-soundcloud-com-marak-marak-the-node-js-rap-" class="ng-scope">New to <a href="https://soundcloud.com/marak/marak-the-node-js-rap" target="_blank">Node.js</a>?</h1>
<p class="ng-scope">Thats okay!  We'll get you pointed in the right direction.</p>
<p class="ng-scope">Per <a href="http://nodejs.org" target="_blank">nodejs.org</a>:</p>
<blockquote class="ng-scope">
<p>"Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices."</p>
</blockquote>
<p class="ng-scope">More simply put, Node.js is an http server built to run quickly and efficiently while allowing you to use the same language on both the frontend and the backend.</p>
<h2 id="what-os-do-i-need-" permalink="what-os-do-i-need" class="ng-scope">What OS do I need?</h2><a href="#/getStarted?q=what-os-do-i-need" class="permalink-thing">#</a>
<p class="ng-scope">Node.js will install on most major Operating systems.  MacOSX, many flavors of Linux, and Windows are supported.  </p>
<p class="ng-scope">Now, lets take a look at what OS you have.  Please choose from the following for instructions on setting up Node.js:</p>
<p class="ng-scope">I have <a href="#/getStarted?q=--install-on-osx-">Mac OSX</a></p>
<p class="ng-scope">I have <a href="#/getStarted?q=--install-on-linux-">Linux</a></p>
<p class="ng-scope">I have <a href="#/getStarted?q=--install-on-windows-">Windows</a></p>
<h2 permalink="--install-on-osx-" class="ng-scope">
<a id="install-on-osx" name="/getStarted?q=--install-on-osx-" class="anchor" href="#/getStarted?q=--install-on-osx-"><span class="mini-icon mini-icon-link"></span></a>
Install on OSX
</h2><a href="#/getStarted?q=--install-on-osx-" class="permalink-thing">#</a>

<p class="ng-scope">Using <a href="http://nodejs.org/#download" target="_blank">a package</a>:</p>
<p class="ng-scope"><em>Simply <a href="http://nodejs.org/#download" target="_blank">download Macintosh Installer</a>.</em></p>
<p class="ng-scope">Using <a href="https://github.com/mxcl/homebrew" target="_blank">homebrew</a>:</p>
<pre class="ng-scope"><code>brew install node
</code></pre><p class="ng-scope">Using <a href="http://www.macports.org/" target="_blank">macports</a>:</p>
<pre class="ng-scope"><code>port install nodejs  
</code></pre><h2 permalink="--install-on-linux-" class="ng-scope">
<a id="install-on-linux" name="/getStarted?q=--install-on-linux-" class="anchor" href="#/getStarted?--install-on-linux-"><span class="mini-icon mini-icon-link"></span></a>
Install on Linux
</h2><a href="#/getStarted?q=--install-on-linux-" class="permalink-thing">#</a>

<h3 id="ubuntu-mint" permalink="ubuntu,-mint" class="ng-scope">Ubuntu, Mint</h3><a href="#/getStarted?q=ubuntu,-mint" class="permalink-thing">#</a>
<p class="ng-scope">Example install:</p>
<pre class="ng-scope"><code>sudo apt-get install python-software-properties python g++ make
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
</code></pre><p class="ng-scope">It installs current stable Node on the current stable Ubuntu. Quantal (12.10) users may need to install the <em>software-properties-common</em> package for the <code>add-apt-repository</code> command to work: <code>sudo apt-get install software-properties-common</code></p>
<p class="ng-scope">As of Node.js v0.10.0, the nodejs package from <a href="https://chrislea.com/2013/03/15/upgrading-from-node-js-0-8-x-to-0-10-0-from-my-ppa/" target="_blank">Chris Lea</a>'s repo includes both npm and nodejs-dev.</p>
<p class="ng-scope">There is a naming conflict with the node package (Amateur Packet Radio Node Program), and the nodejs binary has been renamed from <code>node</code> to <code>nodejs</code>. You'll need to symlink <code>/usr/bin/node</code> to <code>/usr/bin/nodejs</code> or you could uninstall the Amateur Packet Radio Node Program to avoid that conflict.</p>
<h3 id="fedora" permalink="fedora" class="ng-scope">Fedora</h3><a href="#/getStarted?q=fedora" class="permalink-thing">#</a>
<p class="ng-scope"><a href="https://apps.fedoraproject.org/packages/nodejs" target="_blank">Node.js</a> and <a href="https://apps.fedoraproject.org/packages/npm" target="_blank">npm</a> are available in Fedora 18 and later.  Just use your favorite graphical package manager or run this on a terminal to install both npm and node:</p>
<pre class="ng-scope"><code>sudo yum install npm
</code></pre><h3 id="rhel-centos-scientific-linux-6" permalink="rhel/centos/scientific-linux-6" class="ng-scope">RHEL/CentOS/Scientific Linux 6</h3><a href="#/getStarted?q=rhel/centos/scientific-linux-6" class="permalink-thing">#</a>
<p class="ng-scope">Node.js and npm are available from the <a href="https://fedoraproject.org/wiki/EPEL" target="_blank">Fedora Extra Packages for Enterprise Linux (EPEL)</a> <em>testing</em> repository.  If you haven't already done so, first <a href="https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F" target="_blank">enable EPEL</a> and then run the following command to install node and npm:</p>
<pre class="ng-scope"><code>su -c 'yum --enablerepo=epel-testing install npm'
</code></pre><h3 id="arch-linux" permalink="arch-linux" class="ng-scope">Arch Linux</h3><a href="#/getStarted?q=arch-linux" class="permalink-thing">#</a>
<p class="ng-scope">Node.js is available in the Community Repository.</p>
<pre class="ng-scope"><code>pacman -S nodejs
</code></pre><h3 id="gentoo" permalink="gentoo" class="ng-scope">Gentoo</h3><a href="#/getStarted?q=gentoo" class="permalink-thing">#</a>
<p class="ng-scope">Node.js is available in official gentoo portage tree. You have to unmask it.</p>
<pre class="ng-scope"><code># emerge -aqv --autounmask-write nodejs
# etc-update
# emerge -aqv nodejs
</code></pre><h3 id="debian-lmde" permalink="debian,-lmde" class="ng-scope">Debian, LMDE</h3><a href="#/getStarted?q=debian,-lmde" class="permalink-thing">#</a>
<p class="ng-scope">For <em>Debian sid (unstable)</em>, <a href="http://packages.debian.org/search?searchon=names&amp;keywords=nodejs" target="_blank">Node.js is available in the official repo</a>.</p>
<p class="ng-scope">For <em>Debian Wheezy (stable)</em>, <a href="http://packages.debian.org/wheezy-backports/nodejs" target="_blank">Node.js is available in wheezy-backports</a>. To install <a href="http://backports.debian.org/Instructions/" target="_blank">backports</a>, add this to your sources.list (<code>/etc/apt/sources.list</code>):</p>
<pre class="ng-scope"><code>deb http://YOURMIRROR.debian.org/debian wheezy-backports main
</code></pre><p class="ng-scope">Then run:</p>
<pre class="ng-scope"><code>apt-get update
apt-get install nodejs
</code></pre><p class="ng-scope">For <em>Debian Squeeze (oldstable)</em>, your best bet is to compile node by yourself (as <code>root</code>):</p>
<pre class="ng-scope"><code>apt-get install python g++ make
mkdir ~/nodejs &amp;&amp; cd $_
wget -N http://nodejs.org/dist/node-latest.tar.gz
tar xzvf node-latest.tar.gz &amp;&amp; cd `ls -rd node-v*`
./configure
make install
</code></pre><h3 id="opensuse-sle" permalink="opensuse-&amp;-sle" class="ng-scope">openSUSE &amp; SLE</h3><a href="#/getStarted?q=opensuse-&amp;-sle" class="permalink-thing">#</a>
<p class="ng-scope"><a href="https://build.opensuse.org/package/show?package=nodejs&amp;project=devel%3Alanguages%3Anodejs" target="_blank">Node.js stable repos list</a>. Also node.js is available in openSUSE:Factory repository.</p>
<p class="ng-scope">Available RPM packages for: openSUSE 11.4, 12.1, Factory and Tumbleweed; SLE 11 (with SP1 and SP2 variations).</p>
<p class="ng-scope">Example install on openSUSE 12.1:</p>
<pre class="ng-scd1ï¿½,ope"><code>sudo zypper ar http://download.opensuse.org/repositories/devel:/languages:/nodejs/openSUSE_12.1/ NodeJSBuildService 
sudo zypper in nodejs nodejs-devel
</code></pre><h3 id="freebsd-and-openbsd" permalink="freebsd-and-openbsd" class="ng-scope">FreeBSD and OpenBSD</h3><a href="#/getStarted?q=freebsd-and-openbsd" class="permalink-thing">#</a>
<p class="ng-scope">Node.js is available through the ports system.</p>
<pre class="ng-scope"><code>/usr/ports/www/node
</code></pre><p class="ng-scope">Development versions are also available using ports </p>
<pre class="ng-scope"><code>cd /usr/ports/www/node-devel/ &amp;&amp; make install clean
</code></pre><p class="ng-scope">or packages on FreeBSD</p>
<pre class="ng-scope"><code>pkg_add -r node-devel
</code></pre><h2 permalink="--install-on-windows-" class="ng-scope">
<a id="install-on-windows" name="/getStarted?q=--install-on-windows-" class="anchor" href="#/getStarted?q=--install-on-windows-"><span class="mini-icon mini-icon-link"></span></a>
Install on Windows
</h2><a href="#/getStarted?q=--install-on-windows-" class="permalink-thing">#</a>

<p class="ng-scope">Using <a href="http://nodejs.org/#download" target="_blank">a package</a>:</p>
<p class="ng-scope"><em>Simply <a href="http://nodejs.org/#download" target="_blank">download Windows Installer</a>.</em></p>
<p class="ng-scope">Using <a href="http://chocolatey.org" target="_blank">chocolatey</a> to install <a href="http://chocolatey.org/packages/nodejs" target="_blank">Node</a>:  </p>
<pre class="ng-scope"><code>cinst nodejs  
</code></pre><p class="ng-scope">or for <a href="http://chocolatey.org/packages/nodejs.install" target="_blank">full install with NPM</a>:  </p>
<pre class="ng-scope"><code>cinst nodejs.install
</code></pre><h2 id="on-to-sails-js" permalink="on-to-sailsjs" class="ng-scope">On to Sails.js</h2><a href="#/getStarted?q=on-to-sailsjs" class="permalink-thing">#</a>
<p class="ng-scope">Now that Node.js is installed on your system, we can move on to Sails.js.</p>
<p class="ng-scope">Click <a href="https://github.com/balderdashy/sails-docs/blob/master/getting-started/getting-started.md" target="_blank">here</a> to continue.</p>
<h2 id="further-help-" permalink="further-help" class="ng-scope">Further help!</h2><a href="#/getStarted?q=further-help" class="permalink-thing">#</a>
<p class="ng-scope">We know that sometimes things don't go as planned. If you still have any issue with this, please feel free to visit Node.js's <a href="irc://irc.freenode.net/node.js">IRC Channel</a> or our own <a href="irc://irc.freenode.net/sailsjs">IRC Channel</a>.</p>
<p class="ng-scope"><docmeta name="uniqueID" value="NewToNode748472"></docmeta></p>
<docmeta name="displayName" value="New To Node" class="ng-scope">
</docmeta></div>
      <a class="return-top" data-ng-click="scrollTo('the-top')">back to top</a>

    </div>
  </div>
</div> <!-- end of getting started page -->

<div class="sails-footer-wrapper get-started-wrapper ng-scope" id="footer-target">
  <div skrollr="" style="position:relative;" data-bottom-top="top:0px;" data-center-top="top:-60px">
    <img class="sea-floor" id="target" src="/images/bkgd_seaScene.png">
    <!-- ngInclude:  -->
  </div>
</div>
</div>
      <div id="push"></div>
    </div>
    <!-- ngInclude: 'templates/pages/Reusable/Footer/SharingFooter.html' --><div ng-include="'templates/pages/Reusable/Footer/SharingFooter.html'" class="ng-scope"><div class="bottom ng-scope">
  <div class="sharing-footer clearfix">
    <div class="star">
      <iframe src="http://ghbtns.com/github-btn.html?user=balderdashy&amp;repo=sails&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>
      </div>

      <div>
      <iframe src="//www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fsailsjs&amp;width=75&amp;layout=button_count&amp;action=like&amp;show_faces=false&amp;share=false&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:86px; height:21px;" allowtransparency="true"></iframe>
      </div>

      <a href="https://twitter.com/share" class="twitter-share-button" data-text="#sailsjs, the realtime MVC framework for Node.js:" data-url="http://sailsjs.org" data-lang="en"></a>
      <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

      <a href="https://twitter.com/sailsjs" class="twitter-follow-button" data-show-count="false" data-lang="en">Follow @sailsjs</a>

      <a class="small-button" href="#/getStarted">Get started</a>
  </div>
</div>
</div>

    <!--TEMPLATES-->
    <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js"></script><script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--SCRIPTS-->
    <script src="/min/production.js"></script>
    <!--SCRIPTS END-->

    <!-- Tweet button script -->
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
    </script>

    <!-- Follow button script -->
    <!--
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
    -->
  



</body></html>
